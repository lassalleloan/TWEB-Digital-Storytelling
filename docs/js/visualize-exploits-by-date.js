function lineChart() {
  console.log('Linear chart generation with D3.js : Exploits by date');

  const divExploitsByDate = d3.select('#exploits-by-date');

  // Set the dimensions and margins of the graph
  const margin = {
    top: 20,
    right: 50,
    bottom: 30,
    left: 50,
  };
  const width = divExploitsByDate.attr('width') - margin.left - margin.right;
  const height = divExploitsByDate.attr('height') - margin.top - margin.bottom;

  // Parse and format the date/time
  const parseTime = d3.timeParse('%Y-%m-%d');

  // Set the ranges
  const x = d3.scaleTime()
    .range([0, width]);
  const y = d3.scaleLinear()
    .range([height, 0]);

  // Append a 'group' element to 'svg'
  // moves the 'group' element to the top left margin
  const exploitsByDate = divExploitsByDate.append('svg')
    .attr('width', width + margin.left + margin.right)
    .attr('height', height + margin.top + margin.bottom)
    .append('g')
    .attr('transform', `translate(${margin.left},${margin.top})`);

  // Get the data
  d3.csv('dataset/files.csv', (error, dataCsv) => {
    if (error) throw error;

    // Format the data
    const data = d3.nest()
      .key(d => d.date)
      .rollup(d => d.length)
      .sortKeys(d3.ascending)
      .sortValues((a, b) => a.val - b.val)
      .entries(dataCsv)
      .map(d => ({
        date: parseTime(d.key),
        count: d.value,
      }));

    // Scale the range of the data
    x.domain(d3.extent(data, d => d.date));
    y.domain([0, d3.max(data, d => d.count)]);

    // Add the line path
    exploitsByDate.append('path')
      .data([data])
      .attr('class', 'line')
      .attr('d', d3.line()
        .x(d => x(d.date))
        .y(d => y(d.count)));

    // Add the X Axis
    const xAxis = d3.axisBottom(x)
      .ticks(d3.timeYear);
    exploitsByDate.append('g')
      .attr('transform', `translate(0,${height})`)
      .call(xAxis);

    // Add the Y Axis
    const yAxis = d3.axisLeft(y);
    exploitsByDate.append('g')
      .call(yAxis);
  });
}

lineChart();
