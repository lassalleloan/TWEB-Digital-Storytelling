/**
 * Generate a line chart to show number of exploits by date with D3.js
 * author: Loan Lassalle
 */
function lineChart() {
  const d3v4 = d3;

  console.log('Line chart generation with D3.js : Exploits by date');

  const svgExploitsByDate = d3v4.select('#exploits-by-date');

  // Set the dimensions and margins of the graph and zoom's zone
  const margin = {
    top: 20, right: 20, bottom: 110, left: 40,
  };
  const margin2 = {
    top: 430, right: 20, bottom: 30, left: 40,
  };
  const width = +svgExploitsByDate.attr('width') - margin.left - margin.right;
  const height = +svgExploitsByDate.attr('height') - margin.top - margin.bottom;
  const height2 = +svgExploitsByDate.attr('height') - margin2.top - margin2.bottom;

  // Parse a date
  const parse = d3v4.timeParse('%Y-%m');

  // Set scales
  const x = d3v4.scaleTime()
    .range([0, width]);
  const x2 = d3v4.scaleTime()
    .range([0, width]);
  const y = d3v4.scaleLinear()
    .range([height, 0]);
  const y2 = d3v4.scaleLinear()
    .range([height2, 0]);

  // Set axis
  const xAxis = d3v4.axisBottom(x);
  const xAxis2 = d3v4.axisBottom(x2);
  const yAxis = d3v4.axisLeft(y);

  const brush = d3v4.brushX()
    .extent([[0, 0], [width, height2]])
    .on('brush end', brushed);

  const zoom = d3v4.zoom()
    .scaleExtent([1, Infinity])
    .translateExtent([[0, 0], [width, height]])
    .extent([[0, 0], [width, height]])
    .on('zoom', zoomed);

  const area = d3v4.area()
    .curve(d3v4.curveMonotoneX)
    .x(d => x(d.date))
    .y0(height)
    .y1(d => y(d.count));

  const area2 = d3v4.area()
    .curve(d3v4.curveMonotoneX)
    .x(d => x2(d.date))
    .y0(height2)
    .y1(d => y2(d.count));

  svgExploitsByDate.append('defs')
    .append('clipPath')
    .attr('id', 'clip')
    .append('rect')
    .attr('width', width)
    .attr('height', height);

  const focus = svgExploitsByDate.append('g')
    .attr('class', 'focus')
    .attr('transform', `translate(${margin.left},${margin.top})`);

  const context = svgExploitsByDate.append('g')
    .attr('class', 'context')
    .attr('transform', `translate(${margin2.left},${margin2.top})`);

  // Get the data
  d3v4.csv('dataset/files.csv', (error, dataCsv) => {
    if (error) throw error;

    // Format the data
    const data = d3v4.nest()
      .key((d) => {
        const date = new Date(d.date);
        return `${date.getFullYear()}-${date.getMonth() + 1}`;
      })
      .rollup(d => d.length)
      .entries(dataCsv)
      .map(d => ({
        date: parse(d.key),
        count: d.value,
      }))
      .sort((a, b) => a.date - b.date);

    // Set domains
    x.domain(d3v4.extent(data, d => d.date));
    y.domain([0, d3v4.max(data, d => d.count)]);
    x2.domain(x.domain());
    y2.domain(y.domain());

    focus.append('path')
      .datum(data)
      .attr('class', 'area')
      .attr('d', area);

    focus.append('g')
      .attr('class', 'axis axis--x')
      .attr('transform', `translate(0,${height})`)
      .call(xAxis);

    focus.append('g')
      .attr('class', 'axis axis--y')
      .call(yAxis)
      .append('text')
      .attr('fill', '#000')
      .attr('transform', 'rotate(-90)')
      .attr('y', 6)
      .attr('dy', '0.71em')
      .attr('text-anchor', 'end')
      .text('Number of exploits');

    context.append('path')
      .datum(data)
      .attr('class', 'area')
      .attr('d', area2);

    context.append('g')
      .attr('class', 'axis axis--x')
      .attr('transform', `translate(0,${height2})`)
      .call(xAxis2);

    context.append('g')
      .attr('class', 'brush')
      .call(brush)
      .call(brush.move, x.range());

    svgExploitsByDate.append('rect')
      .attr('class', 'zoom')
      .attr('width', width)
      .attr('height', height)
      .attr('transform', `translate(${margin.left},${margin.top})`)
      .call(zoom);

    const bisectDate = d3v4.bisector(d => d.date).right;
    const focus2 = svgExploitsByDate.append('g')
      .attr('class', 'focus2')
      .style('display', 'none');

    focus2.append('circle')
      .attr('r', 4.5)
      .attr('transform', `translate(${margin.left},${margin.top})`);

    focus2.append('text')
      .attr('x', 9)
      .attr('dy', '.35em')
      .attr('transform', `translate(${margin.left},${margin.top})`);

    svgExploitsByDate.append('rect')
      .attr('class', 'overlay')
      .attr('width', width)
      .attr('height', height)
      .attr('transform', `translate(${margin.left},${margin.top})`)
      .on('mouseover', () => { focus2.style('display', null); })
      .on('mouseout', () => { focus2.style('display', 'none'); })
      .on('mousemove', mousemove);

    function mousemove() {
      let x0 = x.invert(d3v4.mouse(this)[0]);
      x0 = parse(`${x0.getFullYear()}-${x0.getMonth() + 1}`);

      const i = bisectDate(data, x0, 1);
      const d0 = data[i - 1];
      const d1 = data[i];
      const d = x0 - d0.date > d1.date - x0 ? d1 : d0;

      focus2.attr('transform', `translate(${x(d.date)},${y(d.count)})`);
      focus2.select('text').text(d.count);
    }
  });

  function brushed() {
    if (d3v4.event.sourceEvent && d3v4.event.sourceEvent.type === 'zoom') {
      return; // ignore brush-by-zoom
    }

    const s = d3v4.event.selection || x2.range();

    x.domain(s.map(x2.invert, x2));
    focus.select('.area')
      .attr('d', area);
    focus.select('.axis--x')
      .call(xAxis);
    svgExploitsByDate.select('.zoom')
      .call(zoom.transform, d3v4.zoomIdentity.scale(width / (s[1] - s[0])).translate(-s[0], 0));
  }

  function zoomed() {
    if (d3v4.event.sourceEvent && d3v4.event.sourceEvent.type === 'brush') {
      return; // ignore zoom-by-brush
    }

    const t = d3v4.event.transform;

    x.domain(t.rescaleX(x2).domain());
    focus.select('.area')
      .attr('d', area);
    focus.select('.axis--x')
      .call(xAxis);
    context.select('.brush')
      .call(brush.move, x.range().map(t.invertX, t));
  }
}

lineChart();
