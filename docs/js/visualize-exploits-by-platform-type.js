/**
 * author: Loan Lassalle
 */

function treeMap() {
  const d3v4 = d3;

  console.log('Treemap chart generation with D3.js : Exploits by platform and type');

  const divExploitsByPlatformType = d3v4.select('#exploits-by-platform-type');

  // Set the dimensions and margins of the graph
  const margin = {
    top: 40,
    right: 10,
    bottom: 10,
    left: 10,
  };
  const width = divExploitsByPlatformType.attr('width') - margin.left - margin.right;
  const height = divExploitsByPlatformType.attr('height') - margin.top - margin.bottom;

  const color = d3v4.scaleOrdinal()
    .range(d3v4.schemeCategory20c);

  const treemap = d3v4.treemap()
    .size([width, height]);

  // Get the data
  d3v4.csv('dataset/files.csv', (error, dataCsv) => {
    if (error) throw error;

    // Format the data
    const data = {
      name: 'files',
      children: d3v4.nest()
        .key(d => d.type)
        .key(d => d.platform)
        .rollup(d => d.length)
        .sortKeys(d3v4.ascending)
        .sortValues((a, b) => a.val - b.val)
        .entries(dataCsv)
        .map(d => ({
          name: d.key,
          children: d.values.map(value => ({
            name: value.key,
            size: value.value,
          })),
        })),
    };

    const root = d3v4.hierarchy(data, d => d.children)
      .sum(d => d.size);

    const tree = treemap(root);

    divExploitsByPlatformType
      .datum(root).selectAll('.node')
      .data(tree.leaves())
      .enter()
      .append('div')
      .attr('class', 'node')
      .style('left', d => `${d.x0}px`)
      .style('top', d => `${d.y0}px`)
      .style('width', d => `${Math.max(0, d.x1 - d.x0 - 1)}px`)
      .style('height', d => `${Math.max(0, d.y1 - d.y0 - 1)}px`)
      .style('background', d => color(d.parent.data.name))
      .text(d => d.data.name);
  });
}

treeMap();
