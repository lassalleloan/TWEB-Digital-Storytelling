let svg = d3.select('svg'),
  width = +svg.attr('width'),
  height = +svg.attr('height');

const color = d3.scaleOrdinal(d3.schemeCategory20);

const format = d3.format(',d');

const treemap = d3.treemap()
  .size([width, height])
  .round(true)
  .padding(1);

const version = {
  'd3-array': '1.0.2',
  'd3-axis': '1.0.4',
  'd3-brush': '1.0.3',
  'd3-chord': '1.0.3',
  'd3-collection': '1.0.2',
  'd3-color': '1.0.2',
  'd3-dispatch': '1.0.2',
  'd3-drag': '1.0.2',
  'd3-dsv': '1.0.3',
  'd3-ease': '1.0.2',
  'd3-force': '1.0.4',
  'd3-format': '1.0.2',
  'd3-geo': '1.4.0',
  'd3-hierarchy': '1.0.3',
  'd3-interpolate': '1.1.2',
  'd3-path': '1.0.3',
  'd3-polygon': '1.0.2',
  'd3-quadtree': '1.0.2',
  'd3-queue': '3.0.3',
  'd3-random': '1.0.2',
  'd3-request': '1.0.3',
  'd3-scale': '1.0.4',
  'd3-selection': '1.0.3',
  'd3-shape': '1.0.4',
  'd3-time': '1.0.4',
  'd3-time-format': '2.0.3',
  'd3-timer': '1.0.3',
  'd3-transition': '1.0.3',
  'd3-voronoi': '1.1.0',
  'd3-zoom': '1.1.0',
};

d3.csv('data/files.csv', (d) => {
  d.size = +d.size;
  return d;
}, (error, data) => {
  if (error) throw error;

  const root = d3.stratify()
    .id(d => d.path)
    .parentId(d => d.path.substring(0, d.path.lastIndexOf('/')))(data)
    .sum(d => d.size)
    .sort((a, b) => b.height - a.height || b.value - a.value);

  treemap(root);

  const cell = svg.selectAll('a')
    .data(root.leaves())
    .enter().append('a')
    .attr('target', '_blank')
    .attr('xlink:href', (d) => { const p = d.data.path.split('/'); return `https://github.com/${p.slice(0, 2).join('/')}/blob/v${version[p[1]]}/src/${p.slice(2).join('/')}`; })
    .attr('transform', d => `translate(${d.x0},${d.y0})`);

  cell.append('rect')
    .attr('id', d => d.id)
    .attr('width', d => d.x1 - d.x0)
    .attr('height', d => d.y1 - d.y0)
    .attr('fill', (d) => { const a = d.ancestors(); return color(a[a.length - 2].id); });

  cell.append('clipPath')
    .attr('id', d => `clip-${d.id}`)
    .append('use')
    .attr('xlink:href', d => `#${d.id}`);

  const label = cell.append('text')
    .attr('clip-path', d => `url(#clip-${d.id})`);

  label.append('tspan')
    .attr('x', 4)
    .attr('y', 13)
    .text(d => d.data.path.substring(d.data.path.lastIndexOf('/') + 1, d.data.path.lastIndexOf('.')));

  label.append('tspan')
    .attr('x', 4)
    .attr('y', 25)
    .text(d => format(d.value));

  cell.append('title')
    .text(d => `${d.id}\n${format(d.value)}`);
});
